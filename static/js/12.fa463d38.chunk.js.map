{"version":3,"sources":["api/apiHelper/apiHelper.js","api/apiSongs.js","api/apiAuthors.js","components/organism/songs/UpdateSong.js"],"names":["apiURL","process","apiActions","url","method","data","a","fetch","headers","body","JSON","stringify","res","json","Error","getAllSongs","removeSong","id","addSong","updateSong","getSong","queryKey","getAllAuthors","removeAuthor","addAuthor","updateAuthor","getAuthor","FormSongs","lazy","UpdateSongs","useParams","useQuery","isLoading","error","isError","dataSong","errorSong","isLoadingSong","isErrorSong","type","defaultValue","allAuthors","massage","message"],"mappings":"0MAAaA,EAAM,UAAMC,gCAAN,YAA0CA,qBAEhDC,EAAU,uCAAG,WAAOC,EAAKC,EAAQC,GAApB,eAAAC,EAAA,+EAEJC,MAAMJ,EAAK,CAC3BC,OAAQA,EACRI,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAPD,cAEhBO,EAFgB,yBASJ,WAAXR,GAA6BQ,EAAIC,QATlB,sCAWhB,IAAIC,MAAJ,sCAXgB,yDAAH,2D,0OCAVC,EAAc,WACzB,OAAOb,YAAW,GAAD,OAAIF,IAAJ,UAAoB,QAG1BgB,EAAa,SAACC,GACzB,OAAOf,YAAW,GAAD,OAAIF,IAAJ,kBAAoBiB,GAAM,WAGhCC,EAAU,SAACb,GACtB,OAAOH,YAAW,GAAD,OAAIF,IAAJ,UAAoB,OAAQK,IAGlCc,EAAa,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,GAAOZ,EAAW,sBAC7C,OAAOH,YAAW,GAAD,OAAIF,IAAJ,kBAAoBiB,GAAM,MAAOZ,IAGvCe,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,cAEhBA,EAFgB,GAExBJ,GAFwB,UAExBA,IACf,OAAOf,YAAW,GAAD,OAAIF,IAAJ,kBAAoBiB,GAAM,S,0OCnBhCK,EAAgB,WAC3B,OAAOpB,YAAW,GAAD,OAAIF,IAAJ,YAAsB,QAG5BuB,EAAe,SAACN,GAC3B,OAAOf,YAAW,GAAD,OAAIF,IAAJ,oBAAsBiB,GAAM,WAGlCO,EAAY,SAACnB,GACxB,OAAOH,YAAW,GAAD,OAAIF,IAAJ,YAAsB,OAAQK,IAGpCoB,EAAe,SAAC,GAAqB,IAAnBR,EAAkB,EAAlBA,GAAOZ,EAAW,sBAC/C,OAAOH,YAAW,GAAD,OAAIF,IAAJ,oBAAsBiB,GAAM,MAAOZ,IAGzCqB,EAAY,SAAC,GAAkB,IAAhBL,EAAe,EAAfA,SAAe,cAElBA,EAFkB,GAE1BJ,GAF0B,UAE1BA,IACf,OAAOf,YAAW,GAAD,OAAIF,IAAJ,oBAAsBiB,GAAM,S,iCCrB/C,mEAMMU,EAAYC,gBAAK,kBAAM,wDACvBd,EAAQc,gBAAK,kBAAM,iCAmCVC,UAjCK,WAAO,IAEjBZ,EAAOa,cAAPb,GAFgB,EAIoBc,YAC1C,UACAT,KAFMjB,EAJgB,EAIhBA,KAAM2B,EAJU,EAIVA,UAAWC,EAJD,EAICA,MAAOC,EAJR,EAIQA,QAJR,EASqEH,YAC3F,CAAC,QAAS,CAAEd,OACZG,KAFYe,EATU,EAShB9B,KAAuB+B,EATP,EASAH,MAA6BI,EAT7B,EASkBL,UAAmCM,EATrD,EAS4CJ,QAKpE,OACE,gCACIF,GAAaK,EACb,cAAC,IAAD,IAEA,cAACV,EAAD,CACEY,KAAK,SACLC,aAAcL,EACdH,UAAWA,EACXS,WAAYpC,EAJd,0BASF,cAACS,EAAD,CAAOoB,QAASA,GAAWI,EAAaI,SAAc,OAALT,QAAK,IAALA,OAAA,EAAAA,EAAOU,WAAP,OAAkBP,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAWO","file":"static/js/12.fa463d38.chunk.js","sourcesContent":["export const apiURL = `${process.env.REACT_APP_API_SERVER}/${process.env.REACT_APP_GITHUB_ACOUNT}`;\n\nexport const apiActions = async (url, method, data) => {\n  try {\n    const res = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return method === \"DELETE\" ? true : res.json();\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n","import { apiActions, apiURL } from \"./apiHelper/apiHelper\";\n\nexport const getAllSongs = () => {\n  return apiActions(`${apiURL}-songs`, \"GET\");\n};\n\nexport const removeSong = (id) => {\n  return apiActions(`${apiURL}-songs/${id}`, \"DELETE\");\n};\n\nexport const addSong = (data) => {\n  return apiActions(`${apiURL}-songs`, \"POST\", data);\n};\n\nexport const updateSong = ({ id, ...data }) => {\n  return apiActions(`${apiURL}-songs/${id}`, \"PUT\", data);\n};\n\nexport const getSong = ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  return apiActions(`${apiURL}-songs/${id}`, \"GET\");\n};\n","import { apiActions, apiURL } from \"./apiHelper/apiHelper\";\n\nexport const getAllAuthors = () => {\n  return apiActions(`${apiURL}-authors`, \"GET\");\n};\n\nexport const removeAuthor = (id) => {\n  return apiActions(`${apiURL}-authors/${id}`, \"DELETE\");\n};\n\nexport const addAuthor = (data) => {\n  return apiActions(`${apiURL}-authors`, \"POST\", data);\n};\n\nexport const updateAuthor = ({ id, ...data }) => {\n  return apiActions(`${apiURL}-authors/${id}`, \"PUT\", data);\n};\n\nexport const getAuthor = ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  return apiActions(`${apiURL}-authors/${id}`, \"GET\");\n};\n","import React, { lazy } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getAllAuthors } from \"../../../api/apiAuthors\";\nimport { getSong } from \"../../../api/apiSongs\";\nimport { useParams } from \"react-router-dom\";\nimport Spinner from \"../../molecules/spinner/Spinner\";\nconst FormSongs = lazy(() => import(\"./FormSongs\"));\nconst Error = lazy(() => import(\"../../atom/Error\"));\n\nconst UpdateSongs = () => {\n\n  const { id } = useParams();\n\n  const { data, isLoading, error, isError } = useQuery(\n    \"authors\",\n    getAllAuthors\n  );\n\n  const { data: dataSong, error: errorSong, isLoading: isLoadingSong, isError: isErrorSong } = useQuery(\n    [\"songs\", { id }],\n    getSong\n  );\n\n  return (\n    <div>\n      {(isLoading || isLoadingSong) ? (\n        <Spinner />\n      ) : (\n        <FormSongs\n          type=\"update\"\n          defaultValue={dataSong}\n          isLoading={isLoading}\n          allAuthors={data}\n        >\n          Update Songs\n        </FormSongs>\n      )}\n      <Error isError={isError || isErrorSong} massage={error?.message || errorSong?.message} />\n    </div>\n  );\n};\n\nexport default UpdateSongs;\n"],"sourceRoot":""}