{"version":3,"sources":["components/molecules/playList/PlayListManagement.js"],"names":["UpdatePlayList","lazy","AddPlayList","PlayListManagement","children","isOver","playList","setPlayList","changeStatusItems","match","useRouteMatch","path","React","cloneElement"],"mappings":"uGAAA,yCAGMA,EAAiBC,gBAAK,kBAC1B,wDAEIC,EAAcD,gBAAK,kBAAM,wDA8ChBE,UA5CY,SAAC,GAMrB,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,YACAC,EACI,EADJA,kBAEMC,EAAQC,cAEd,OACE,mCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAI,UAAKF,EAAME,KAAX,WAAX,SACE,cAACX,EAAD,CACEO,YAAaA,EACbD,SAAUA,EACVD,OAAQA,EACRG,kBAAmBA,EAJrB,SAMGI,IAAMC,aAAaT,EAAU,CAAEC,eAGpC,cAAC,IAAD,CAAOM,KAAI,UAAKF,EAAME,KAAX,QAAX,SACE,cAACT,EAAD,CACEI,SAAUA,EACVD,OAAQA,EACRG,kBAAmBA,EAHrB,SAKGI,IAAMC,aAAaT,EAAU,CAAEC","file":"static/js/27.900343e3.chunk.js","sourcesContent":["import React, { lazy } from \"react\";\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nconst UpdatePlayList = lazy(() =>\n  import(\"../../organism/playList/UpdatePlayList\")\n);\nconst AddPlayList = lazy(() => import(\"../../organism/playList/AddPlayList\"));\n\nconst PlayListManagement = ({\n  children,\n  isOver,\n  playList,\n  setPlayList,\n  changeStatusItems,\n}) => {\n  const match = useRouteMatch();\n\n  return (\n    <>\n      <Switch>\n        <Route path={`${match.path}/update`}>\n          <UpdatePlayList\n            setPlayList={setPlayList}\n            playList={playList}\n            isOver={isOver}\n            changeStatusItems={changeStatusItems}\n          >\n            {React.cloneElement(children, { isOver })}\n          </UpdatePlayList>\n        </Route>\n        <Route path={`${match.path}/add`}>\n          <AddPlayList\n            playList={playList}\n            isOver={isOver}\n            changeStatusItems={changeStatusItems}\n          >\n            {React.cloneElement(children, { isOver })}\n          </AddPlayList>\n        </Route>\n      </Switch>\n    </>\n  );\n};\n\nPlayListManagement.propTypes = {\n  children: PropTypes.node,\n  isOver: PropTypes.bool,\n  playList: PropTypes.array,\n  setPlayList: PropTypes.func,\n  changeStatusItems: PropTypes.func,\n};\n\nexport default PlayListManagement;\n"],"sourceRoot":""}