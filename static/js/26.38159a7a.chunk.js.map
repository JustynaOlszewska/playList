{"version":3,"sources":["constants/itemType.js","styles/styleComponents/playList/StyledItem.js","components/molecules/playList/Item.js","hook/playList/useDragDrop.js"],"names":["ITEM_TYPE","StyledContainerItem","styled","div","isDragging","Item","item","index","moveItem","id","ref","useRef","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","type","drag","useDragDrop","title","data-handler-id","className","React","memo"],"mappings":"uGAAA,kCAAO,IAAMA,EAAY,Q,sECEZC,E,MAAsBC,QAAOC,IAAV,mQACnB,qBAAGC,WAA+B,EAAI,K,oDCE7CC,EAAO,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,GAC/BC,EAAMC,iBAAO,MAD2B,ECFrB,SAACH,EAAUD,EAAOE,EAAIC,EAAKJ,GAAU,IAAD,EAC/BM,YAAQ,CACpCC,OAAQb,IACRc,QAFoC,SAE5BC,GACN,MAAO,CACLC,UAAWD,EAAQE,iBAGvBC,MAPoC,SAO9BZ,EAAMS,GAAU,IAAD,EACnB,GAAKL,EAAIS,QAAT,CAGA,IAAMC,EAAYd,EAAKC,MACjBc,EAAad,EAEnB,GAAIa,IAAcC,EAAlB,CAIA,IAAMC,EAAiB,UAAGZ,EAAIS,eAAP,aAAG,EAAaI,wBAEjCC,GACHF,EAAkBG,OAASH,EAAkBI,KAAO,EAIjDC,EAFeZ,EAAQa,kBAEKC,EAAIP,EAAkBI,IAEpDN,EAAYC,GAAcM,EAAeH,GAIzCJ,EAAYC,GAAcM,EAAeH,IAG7ChB,EAASY,EAAWC,GAEpBf,EAAKC,MAAQc,QArC4C,mBACpDL,EADoD,KACpDA,UAAac,EADuC,OAyC9BC,YAAQ,CACrCzB,KAAK,yBAAG0B,KAAMhC,KAAcM,GAAxB,IAA8BC,QAAOE,OACzCK,QAAS,SAACC,GAAD,MAAc,CACrBX,WAAYW,EAAQX,iBA5CqC,mBAyCpDA,EAzCoD,KAyCpDA,WAMT,MAAO,CAAE6B,KA/CoD,KA+C9CH,OAAMd,YAAWZ,cD3Cc8B,CAC5C1B,EACAD,EACAE,EACAC,EACAJ,GALMwB,EAFsC,EAEtCA,KAAMG,EAFgC,EAEhCA,KAAMjB,EAF0B,EAE1BA,UAAWZ,EAFe,EAEfA,WAQvB+B,GAAU7B,GAAQ,IAAlB6B,MAIR,OAFAF,EAAKH,EAAKpB,IAGR,mCACE,eAACT,EAAD,CACES,IAAKA,EACL0B,kBAAiBpB,EACjBZ,WAAYA,EAHd,UAKE,qBAAKiC,UAAW,cAChB,mBAAGA,UAAW,aAAd,SAA6BF,UAiBtBG,cAAMC,KAAKlC","file":"static/js/26.38159a7a.chunk.js","sourcesContent":["export const ITEM_TYPE = \"ITEM\";\n","import styled from \"styled-components\";\n\nexport const StyledContainerItem = styled.div`\n  opacity: ${({ isDragging }) => (isDragging ? 0 : 1)};\n  font-size: 15px;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 5px;\n  z-index: 1;\n  background-color: #3f51b5;\n  color: white;\n  box-shadow: 5px 5px 8px #888888;\n  width: 80%;\n  text-align: center;\n`;\n","import React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledContainerItem } from \"../../../styles/styleComponents/playList/StyledItem\";\nimport { useDragDrop } from \"../../../hook/playList/useDragDrop\";\n\nconst Item = ({ item, index, moveItem, id }) => {\n  const ref = useRef(null);\n  const { drop, drag, handlerId, isDragging } = useDragDrop(\n    moveItem,\n    index,\n    id,\n    ref,\n    item\n  );\n\n  const { title } = item || {};\n\n  drag(drop(ref));\n\n  return (\n    <>\n      <StyledContainerItem\n        ref={ref}\n        data-handler-id={handlerId}\n        isDragging={isDragging}\n      >\n        <div className={\"color-bar\"} />\n        <p className={\"item-title\"}>{title}</p>\n      </StyledContainerItem>\n    </>\n  );\n};\n\nItem.propTypes = {\n  status: PropTypes.objectOf(PropTypes.string),\n  index: PropTypes.number,\n  item: PropTypes.shape({\n    title: PropTypes.string,\n    index: PropTypes.number,\n  }),\n  moveItem: PropTypes.func,\n  id: PropTypes.number,\n};\n\nexport default React.memo(Item);\n","import { useDrop, useDrag } from \"react-dnd\";\nimport { ITEM_TYPE } from \"../../constants/itemType\";\n\nexport const useDragDrop = (moveItem, index, id, ref, item) => {\n  const [{ handlerId }, drop] = useDrop({\n    accept: ITEM_TYPE,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      };\n    },\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      const clientOffset = monitor.getClientOffset();\n\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      moveItem(dragIndex, hoverIndex);\n\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ITEM_TYPE, ...item, index, id },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  return { drag, drop, handlerId, isDragging };\n};\n"],"sourceRoot":""}