{"version":3,"sources":["api/apiHelper/apiHelper.js","api/apiAuthors.js","components/organism/songs/UpdateSong.js"],"names":["apiURL","process","apiActions","url","method","data","a","fetch","headers","body","JSON","stringify","res","json","Error","getAllAuthors","removeAuthor","id","addAuthor","updateAuthor","getAuthor","queryKey","FormSongs","lazy","UpdateSongs","useQuery","isLoading","error","isError","type","defaultValue","allAuthors","message"],"mappings":"0MAAaA,EAAM,UAAMC,gCAAN,YAA0CA,qBAEhDC,EAAU,uCAAG,WAAOC,EAAKC,EAAQC,GAApB,eAAAC,EAAA,+EAEJC,MAAMJ,EAAK,CAC3BC,OAAQA,EACRI,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAPD,cAEhBO,EAFgB,yBASJ,WAAXR,GAA6BQ,EAAIC,QATlB,sCAWhB,IAAIC,MAAJ,sCAXgB,yDAAH,2D,0OCAVC,EAAgB,WAC3B,OAAOb,YAAW,GAAD,OAAIF,IAAJ,YAAsB,QAG5BgB,EAAe,SAACC,GAC3B,OAAOf,YAAW,GAAD,OAAIF,IAAJ,oBAAsBiB,GAAM,WAGlCC,EAAY,SAACb,GACxB,OAAOH,YAAW,GAAD,OAAIF,IAAJ,YAAsB,OAAQK,IAGpCc,EAAe,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,GAAOZ,EAAW,sBAC/C,OAAOH,YAAW,GAAD,OAAIF,IAAJ,oBAAsBiB,GAAM,MAAOZ,IAGzCe,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,cAElBA,EAFkB,GAE1BJ,GAF0B,UAE1BA,IACf,OAAOf,YAAW,GAAD,OAAIF,IAAJ,oBAAsBiB,GAAM,S,iCCrB/C,mDAIMK,EAAYC,gBAAK,kBAAM,uDA2BdC,UAzBK,WAAO,IAAD,EACoBC,YAC1C,UACAV,KAFMV,EADgB,EAChBA,KAAMqB,EADU,EACVA,UAAWC,EADD,EACCA,MAAOC,EADR,EACQA,QAKhC,OACE,gCACGF,EACC,cAAC,IAAD,IAEA,cAACJ,EAAD,CACEO,KAAK,SACLC,aAAczB,EACdqB,UAAWA,EACXK,WAAY1B,EAJd,0BASDuB,GAAW,2CAAcD,EAAMK","file":"static/js/15.fcbc4e15.chunk.js","sourcesContent":["export const apiURL = `${process.env.REACT_APP_API_SERVER}/${process.env.REACT_APP_GITHUB_ACOUNT}`;\r\n\r\nexport const apiActions = async (url, method, data) => {\r\n  try {\r\n    const res = await fetch(url, {\r\n      method: method,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return method === \"DELETE\" ? true : res.json();\r\n  } catch (error) {\r\n    throw new Error(`somthing went wrong: ${error}`);\r\n  }\r\n};","import { apiActions, apiURL} from \"./apiHelper/apiHelper\";\n\nexport const getAllAuthors = () => {\n  return apiActions(`${apiURL}-authors`, \"GET\");\n};\n\nexport const removeAuthor = (id) => {\n  return apiActions(`${apiURL}-authors/${id}`, \"DELETE\");\n};\n\nexport const addAuthor = (data) => {\n  return apiActions(`${apiURL}-authors`, \"POST\", data);\n};\n\nexport const updateAuthor = ({ id, ...data }) => {\n  return apiActions(`${apiURL}-authors/${id}`, \"PUT\", data);\n};\n\nexport const getAuthor = ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  return apiActions(`${apiURL}-authors/${id}`, \"GET\");\n};\n","import React, { lazy } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getAllAuthors } from \"../../../api/apiAuthors\";\nimport Spinner from \"../../molecules/spinner/Spinner\";\nconst FormSongs = lazy(() => import(\"./FormSongs\"));\n\nconst UpdateSongs = () => {\n  const { data, isLoading, error, isError } = useQuery(\n    \"authors\",\n    getAllAuthors\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <FormSongs\n          type=\"update\"\n          defaultValue={data}\n          isLoading={isLoading}\n          allAuthors={data}\n        >\n          Update Songs\n        </FormSongs>\n      )}\n      {isError && <span>Error: {error.message}</span>}\n    </div>\n  );\n};\n\nexport default UpdateSongs;\n"],"sourceRoot":""}