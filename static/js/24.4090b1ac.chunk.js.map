{"version":3,"sources":["api/apiHelper/apiHelper.js","api/apiSongs.js","styles/styleComponents/songs/StyledSongDetails.js","components/molecules/songs/SongDetails.js"],"names":["apiURL","process","apiActions","url","method","data","a","fetch","headers","body","JSON","stringify","res","json","Error","getAllSongs","removeSong","id","addSong","updateSong","getSong","queryKey","StyledDiv","styled","div","lazy","SongDetails","useParams","useQuery","error","isLoading","isError","message","title","duration","author","playlists","name","Spinner","map","massage"],"mappings":"0MAAaA,EAAM,UAAMC,gCAAN,YAA0CA,qBAEhDC,EAAU,uCAAG,WAAOC,EAAKC,EAAQC,GAApB,eAAAC,EAAA,+EAEJC,MAAMJ,EAAK,CAC3BC,OAAQA,EACRI,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAPD,cAEhBO,EAFgB,yBASJ,WAAXR,GAA6BQ,EAAIC,QATlB,sCAWhB,IAAIC,MAAJ,sCAXgB,yDAAH,2D,0OCAVC,EAAc,WACzB,OAAOb,YAAW,GAAD,OAAIF,IAAJ,UAAoB,QAG1BgB,EAAa,SAACC,GACzB,OAAOf,YAAW,GAAD,OAAIF,IAAJ,kBAAoBiB,GAAM,WAGhCC,EAAU,SAACb,GACtB,OAAOH,YAAW,GAAD,OAAIF,IAAJ,UAAoB,OAAQK,IAGlCc,EAAa,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,GAAOZ,EAAW,sBAC7C,OAAOH,YAAW,GAAD,OAAIF,IAAJ,kBAAoBiB,GAAM,MAAOZ,IAGvCe,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,cAEhBA,EAFgB,GAExBJ,GAFwB,UAExBA,IACf,OAAOf,YAAW,GAAD,OAAIF,IAAJ,kBAAoBiB,GAAM,S,sFCnBhCK,E,MAAYC,QAAOC,IAAV,2G,eCKhBV,EAAQW,gBAAK,kBAAM,iCAkDVC,UAhDK,WAAO,IACjBT,EAAOU,cAAPV,GADgB,EAGoBW,YAC1C,CAAC,QAAS,CAAEX,OACZG,KAFMf,EAHgB,EAGhBA,KAAMwB,EAHU,EAGVA,MAAOC,EAHG,EAGHA,UAAWC,EAHR,EAGQA,QAIxBC,GAAYH,GAAS,IAArBG,QAPgB,EAapB3B,GAAQ,GAbY,IAStB4B,aATsB,MASd,gBATc,MAUtBC,gBAVsB,MAUX,mBAVW,MAWtBC,cAXsB,MAWb,GAXa,MAYtBC,iBAZsB,MAYV,GAZU,KAeYD,GAAU,IAAtCE,YAfgB,MAeT,iBAfS,EAiBxB,OACE,eAACf,EAAD,WACGQ,EACC,cAACQ,EAAA,EAAD,IAEA,qCACE,6BAAKL,IACL,4CAAeC,EAAf,cACA,0CAAaG,KACb,4CACa,IACVD,EAAUG,KAAI,gBAAGF,EAAH,EAAGA,KAAMpB,EAAT,EAASA,GAAT,OACb,6BAAcoB,GAALpB,YAKjB,cAACH,EAAD,CAAOiB,QAASA,EAASS,QAASR","file":"static/js/24.4090b1ac.chunk.js","sourcesContent":["export const apiURL = `${process.env.REACT_APP_API_SERVER}/${process.env.REACT_APP_GITHUB_ACOUNT}`;\n\nexport const apiActions = async (url, method, data) => {\n  try {\n    const res = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return method === \"DELETE\" ? true : res.json();\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n","import { apiActions, apiURL } from \"./apiHelper/apiHelper\";\n\nexport const getAllSongs = () => {\n  return apiActions(`${apiURL}-songs`, \"GET\");\n};\n\nexport const removeSong = (id) => {\n  return apiActions(`${apiURL}-songs/${id}`, \"DELETE\");\n};\n\nexport const addSong = (data) => {\n  return apiActions(`${apiURL}-songs`, \"POST\", data);\n};\n\nexport const updateSong = ({ id, ...data }) => {\n  return apiActions(`${apiURL}-songs/${id}`, \"PUT\", data);\n};\n\nexport const getSong = ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  return apiActions(`${apiURL}-songs/${id}`, \"GET\");\n};\n","import styled from \"styled-components\";\n\nexport const StyledDiv = styled.div`\n  height: 100vh;\n  min-height: 100vh;\n  width: 100%;\n  text-align: center;\n`;\n","import React, { lazy } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport PropTypes from \"prop-types\";\nimport { getSong } from \"../../../api/apiSongs\";\nimport { StyledDiv } from \"../../../styles/styleComponents/songs/StyledSongDetails\";\nimport Spinner from \"../../molecules/spinner/Spinner\";\nconst Error = lazy(() => import(\"../../atom/Error\"));\n\nconst SongDetails = () => {\n  const { id } = useParams();\n\n  const { data, error, isLoading, isError } = useQuery(\n    [\"songs\", { id }],\n    getSong\n  );\n  const { message } = error || {};\n  const {\n    title = \"title unknown\",\n    duration = \"duration unknown\",\n    author = {},\n    playlists = [],\n  } = data || {};\n\n  const { name = \"author unknown\" } = author || {};\n\n  return (\n    <StyledDiv>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <>\n          <h1>{title}</h1>\n          <h4>Duration: {duration} seconds</h4>\n          <h5>Author: {name}</h5>\n          <ul>\n            Playlists:{\" \"}\n            {playlists.map(({ name, id }) => (\n              <li key={id}>{name}</li>\n            ))}\n          </ul>\n        </>\n      )}\n      <Error isError={isError} massage={message} />\n    </StyledDiv>\n  );\n};\n\nSongDetails.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n    })\n  ),\n};\n\nexport default SongDetails;\n"],"sourceRoot":""}