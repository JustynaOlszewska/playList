{"version":3,"sources":["../node_modules/@material-ui/core/esm/FormControl/formControlState.js","../node_modules/@material-ui/core/esm/FormControl/FormControlContext.js","../node_modules/@material-ui/core/esm/FormControl/useFormControl.js","../node_modules/@material-ui/core/esm/FormLabel/FormLabel.js","../node_modules/@material-ui/core/esm/InputLabel/InputLabel.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["formControlState","_ref","props","states","muiFormControl","reduce","acc","state","FormControlContext","React","useFormControl","FormLabel","ref","children","classes","className","_props$component","color","component","Component","other","disabled","error","filled","focused","required","_objectWithoutProperties","fcs","_extends","clsx","root","concat","capitalize","asterisk","withStyles","theme","palette","text","secondary","typography","body1","lineHeight","padding","primary","main","colorSecondary","name","InputLabel","_props$disableAnimati","disableAnimation","shrinkProp","margin","shrink","variant","adornedStart","formControl","animated","marginDense","outlined","display","transformOrigin","position","left","top","transform","transition","transitions","create","duration","shorter","easing","easeOut","zIndex","pointerEvents","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","includes","constructor","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/2.56c277ee.chunk.js","sourcesContent":["export default function formControlState(_ref) {\n  var props = _ref.props,\n      states = _ref.states,\n      muiFormControl = _ref.muiFormControl;\n  return states.reduce(function (acc, state) {\n    acc[state] = props[state];\n\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n\n    return acc;\n  }, {});\n}","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar FormControlContext = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\n\nexport function useFormControl() {\n  return React.useContext(FormControlContext);\n}\nexport default FormControlContext;","import * as React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.body1, {\n      lineHeight: 1,\n      padding: 0,\n      '&$focused': {\n        color: theme.palette.primary.main\n      },\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {\n      '&$focused': {\n        color: theme.palette.secondary.main\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Styles applied to the asterisk element. */\n    asterisk: {\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }\n  };\n};\nvar FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      color = props.color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'label' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      required = props.required,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[\"color\".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),\n    ref: ref\n  }, other), children, fcs.required && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    className: clsx(classes.asterisk, fcs.error && classes.error)\n  }, \"\\u2009\", '*'));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormLabel'\n})(FormLabel);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport FormLabel from '../FormLabel';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      transformOrigin: 'top left'\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Pseudo-class applied to the asterisk element. */\n    asterisk: {},\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      // slight alteration to spec spacing to match visual spec result\n      transform: 'translate(0, 24px) scale(1)'\n    },\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      // Compensation for the `Input.inputDense` style.\n      transform: 'translate(0, 21px) scale(1)'\n    },\n\n    /* Styles applied to the `input` element if `shrink={true}`. */\n    shrink: {\n      transform: 'translate(0, 1.5px) scale(0.75)',\n      transformOrigin: 'top left'\n    },\n\n    /* Styles applied to the `input` element if `disableAnimation={false}`. */\n    animated: {\n      transition: theme.transitions.create(['color', 'transform'], {\n        duration: theme.transitions.duration.shorter,\n        easing: theme.transitions.easing.easeOut\n      })\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"`. */\n    filled: {\n      // Chrome's autofill feature gives the input field a yellow background.\n      // Since the input field is behind the label in the HTML tree,\n      // the input field is drawn last and hides the label with an opaque background color.\n      // zIndex: 1 will raise the label above opaque background-colors of input.\n      zIndex: 1,\n      pointerEvents: 'none',\n      transform: 'translate(12px, 20px) scale(1)',\n      '&$marginDense': {\n        transform: 'translate(12px, 17px) scale(1)'\n      },\n      '&$shrink': {\n        transform: 'translate(12px, 10px) scale(0.75)',\n        '&$marginDense': {\n          transform: 'translate(12px, 7px) scale(0.75)'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      // see comment above on filled.zIndex\n      zIndex: 1,\n      pointerEvents: 'none',\n      transform: 'translate(14px, 20px) scale(1)',\n      '&$marginDense': {\n        transform: 'translate(14px, 12px) scale(1)'\n      },\n      '&$shrink': {\n        transform: 'translate(14px, -6px) scale(0.75)'\n      }\n    }\n  };\n};\nvar InputLabel = /*#__PURE__*/React.forwardRef(function InputLabel(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$disableAnimati = props.disableAnimation,\n      disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,\n      margin = props.margin,\n      shrinkProp = props.shrink,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"disableAnimation\", \"margin\", \"shrink\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var shrink = shrinkProp;\n\n  if (typeof shrink === 'undefined' && muiFormControl) {\n    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;\n  }\n\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['margin', 'variant']\n  });\n  return /*#__PURE__*/React.createElement(FormLabel, _extends({\n    \"data-shrink\": shrink,\n    className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {\n      'filled': classes.filled,\n      'outlined': classes.outlined\n    }[fcs.variant]),\n    classes: {\n      focused: classes.focused,\n      disabled: classes.disabled,\n      error: classes.error,\n      required: classes.required,\n      asterisk: classes.asterisk\n    },\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the `InputLabel`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * If `true`, the transition animation is disabled.\n   */\n  disableAnimation: PropTypes.bool,\n\n  /**\n   * If `true`, apply disabled class.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * if `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputLabel'\n})(InputLabel);","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}