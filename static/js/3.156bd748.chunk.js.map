{"version":3,"sources":["styles/helperStyles/FlexDirection.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","styles/styleComponents/authors/StyledFormAuthors.js","constants/validationForm.js","components/organism/authors/FormAuthors.js"],"names":["FlexDirection","css","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","StyledForm","styled","form","type","update","add","StyledInput","TextField","typeSong","schemaValidationAuthors","yup","shape","name","required","max","schemaValidationSong","title","author","duration","typeError","schemaValidationPlayList","FormAuthors","defaultValue","onFormSubmit","isLoading","children","useForm","resolver","yupResolver","register","handleSubmit","errors","nameValue","alert","message","onSubmit","data","style","position","htmlFor","id","inputRef","variant","color","split","slice","exampleRequired","top","width","severity","React","memo"],"mappings":"8JAEaA,EAAgBC,cAAH,0E,6FCEX,SAASC,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,uJIDjFC,EAAaC,UAAOC,KAAV,oMACnBhB,KAIA,kBACS,QADT,EAAGiB,MAEHhB,cADA,wFAKA,kBACW,WADX,EAAGiB,QAEHjB,cADA,6GAME,kBACM,QADN,EAAGkB,KAELlB,cADA,6GAWSmB,EAAcL,kBAAOM,IAAPN,CAAH,sDAEpB,kBACa,SADb,EAAGO,UAEHrB,cADA,wD,iCCrCJ,mHAEasB,EAA0BC,MAAaC,MAAM,CACxDC,KAAMF,MAEHG,SAAS,2BACTC,IAAI,GAAI,mDAGAC,EAAuBL,MAAaC,MAAM,CACrDK,MAAON,MAEJG,SAAS,2BACTC,IAAI,GAAI,iDACXG,OAAQP,MAAaG,SAAS,6BAC9BK,SAAUR,MAEPS,UAAU,mCACVN,SAAS,gCAGDO,EAA2BV,MAAaC,MAAM,CACzDC,KAAMF,MAEHG,SAAS,mCACTC,IAAI,GAAI,4D,iCCzBb,iGAaMO,EAAc,SAAC,GAMd,IALLC,EAKI,EALJA,aACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,UACArB,EAEI,EAFJA,KACAsB,EACI,EADJA,SACI,EACuCC,YAAQ,CACjDJ,eACAK,SAAUC,YAAYnB,OAFhBoB,EADJ,EACIA,SAAUC,EADd,EACcA,aAAcC,EAD5B,EAC4BA,OAKxBnB,GAASmB,GAAU,IAAnBnB,KACMoB,EAAcV,EAApBV,KACSqB,GAAUrB,GAAQ,IAA3BsB,QACFC,EAAWL,GAAa,SAACM,GAC7Bb,EAAaa,MAGf,OACE,mCACE,eAAC,IAAD,CACEC,MAAO,CAAEC,SAAU,YACnBnC,KAAMA,EACNgC,SAAUA,EAHZ,UAKE,6BAAKV,IACL,cAAC,IAAD,CAAYc,QAAQ,OAApB,oBACA,cAAC,IAAD,CACEjB,aAAcU,EACd7B,KAAK,OACLqC,GAAG,OACH5B,KAAK,OACL6B,SAAUZ,EACVE,OAAQnB,IAEV,cAAC,IAAD,CAAQ8B,QAAQ,WAAWC,MAAM,UAAUxC,KAAK,SAAhD,SACGqB,EAAY,UAAYC,EAASmB,MAAM,KAAKC,MAAM,EAAG,KAEvDd,EAAOe,iBAAmB,0DAC3B,qBAAKT,MAAO,CAAEC,SAAU,WAAYS,IAAK,IAAKC,MAAO,QAArD,SACGpC,GACC,cAAC,IAAD,CAAOqC,SAAS,QAAhB,SACE,4BAAIhB,cAsBHiB,cAAMC,KAAK9B","file":"static/js/3.156bd748.chunk.js","sourcesContent":["import { css } from \"styled-components\";\n\nexport const FlexDirection = css`\n  display: flex;\n  flex-direction: column;\n`;\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled, { css } from \"styled-components\";\nimport { FlexDirection } from \"../../helperStyles/FlexDirection\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport const StyledForm = styled.form`\n  ${FlexDirection}\n  align-items: center;\n  justify-content: center;\n  height: 60vh;\n  ${({ type }) =>\n    type === \"add\" &&\n    css`\n      text-transform: uppercase;\n      color: red;\n    `}\n  ${({ update }) =>\n    update === \"update\" &&\n    css`\n      height: 500px;\n      width: 200px;\n      justify-content: start;\n    `}\n    ${({ add }) =>\n    add === \"add\" &&\n    css`\n      height: 500px;\n      width: 200px;\n      justify-content: start;\n    `}\n  @media(min-height: 900px) {\n    justify-content: flex-start;\n  }\n`;\n\nexport const StyledInput = styled(TextField)`\n  margin: 10px 0;\n  ${({ typeSong }) =>\n    typeSong === \"song\" &&\n    css`\n      width: 100%;\n    `}\n`;\n","import * as yup from \"yup\";\n\nexport const schemaValidationAuthors = yup.object().shape({\n  name: yup\n    .string()\n    .required(\"Title field is required\")\n    .max(30, \"Title field should contains max 30 characters\"),\n});\n\nexport const schemaValidationSong = yup.object().shape({\n  title: yup\n    .string()\n    .required(\"Title field is required\")\n    .max(30, \"Title field should contains max 30 characters\"),\n  author: yup.string().required(\"Author fields is required\"),\n  duration: yup\n    .number()\n    .typeError(\"Duration field must be a number\")\n    .required(\"Duration field is required\"),\n});\n\nexport const schemaValidationPlayList = yup.object().shape({\n  name: yup\n    .string()\n    .required(\"Playlist name field is required\")\n    .max(30, \"Playlist name field should contains max 30 characters\"),\n});\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport PropTypes from \"prop-types\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {\n  StyledForm,\n  StyledInput,\n} from \"../../../styles/styleComponents/authors/StyledFormAuthors\";\nimport { schemaValidationAuthors } from \"../../../constants/validationForm\";\n\nconst FormAuthors = ({\n  defaultValue,\n  onFormSubmit,\n  isLoading,\n  type,\n  children,\n}) => {\n  const { register, handleSubmit, errors } = useForm({\n    defaultValue,\n    resolver: yupResolver(schemaValidationAuthors),\n  });\n\n  const { name } = errors || {};\n  const { name: nameValue } = defaultValue;\n  const { message: alert } = name || {};\n  const onSubmit = handleSubmit((data) => {\n    onFormSubmit(data);\n  });\n\n  return (\n    <>\n      <StyledForm\n        style={{ position: \"relative\" }}\n        type={type}\n        onSubmit={onSubmit}\n      >\n        <h1>{children}</h1>\n        <InputLabel htmlFor=\"name\">Author</InputLabel>\n        <StyledInput\n          defaultValue={nameValue}\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          inputRef={register}\n          errors={name}\n        />\n        <Button variant=\"outlined\" color=\"primary\" type=\"Submit\">\n          {isLoading ? \"Wait...\" : children.split(\" \").slice(0, 1)}\n        </Button>\n        {errors.exampleRequired && <span>This field is required</span>}\n        <div style={{ position: \"absolute\", top: \"0\", width: \"100%\" }}>\n          {name && (\n            <Alert severity=\"error\">\n              <p>{alert}</p>\n            </Alert>\n          )}\n        </div>\n      </StyledForm>\n    </>\n  );\n};\n\nFormAuthors.propTypes = {\n  defaultValue: PropTypes.oneOfType([\n    PropTypes.shape({\n      name: PropTypes.string,\n    }),\n    PropTypes.string,\n  ]),\n  onFormSubmit: PropTypes.func,\n  isLoading: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  children: PropTypes.string.isRequired,\n};\n\nexport default React.memo(FormAuthors);\n"],"sourceRoot":""}