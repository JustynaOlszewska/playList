{"version":3,"sources":["constants/itemType.js","components/organism/playList/Item.js"],"names":["ITEM_TYPE","Item","item","index","moveItem","status","id","ref","useRef","useDrop","accept","collect","monitor","handlerId","getHandlerId","hover","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","type","isDragging","drag","style","opacity","fontSize","margin","padding","borderRadius","zIndex","backgroundColor","color","boxShadow","width","textAlign","data-handler-id","className","title"],"mappings":"uGAAA,kCAAO,IAAMA,EAAY,Q,uGC4GVC,UAtGF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,GACvCC,EAAMC,iBAAO,MADmC,EAGxBC,YAAQ,CACpCC,OAAQV,IACRW,QAFoC,SAE5BC,GACN,MAAO,CACLC,UAAWD,EAAQE,iBAGvBC,MAPoC,SAO9Bb,EAAMU,GAAU,IAAD,EACnB,GAAKL,EAAIS,QAAT,CAGA,IAAMC,EAAYf,EAAKC,MACjBe,EAAaf,EAEnB,GAAIc,IAAcC,EAAlB,CAIA,IAAMC,EAAiB,UAAGZ,EAAIS,eAAP,aAAG,EAAaI,wBAEjCC,GACHF,EAAkBG,OAASH,EAAkBI,KAAO,EAIjDC,EAFeZ,EAAQa,kBAEKC,EAAIP,EAAkBI,IAEpDN,EAAYC,GAAcM,EAAeH,GAIzCJ,EAAYC,GAAcM,EAAeH,IAG7CjB,EAASa,EAAWC,GAEpBhB,EAAKC,MAAQe,QAvCqC,mBAG7CL,EAH6C,KAG7CA,UAAac,EAHgC,OA2CvBC,YAAQ,CACrC1B,KAAK,yBAAG2B,KAAM7B,KAAcE,GAAxB,IAA8BC,QAAOG,OACzCK,QAAS,SAACC,GAAD,MAAc,CACrBkB,WAAYlB,EAAQkB,iBA9C8B,mBA2C7CA,EA3C6C,KA2C7CA,WAaT,OAFAC,EAtDsD,MAsDjDJ,EAAKpB,IAGR,cAAC,WAAD,UACE,sBACEA,IAAKA,EACLyB,MAAO,CACLC,QAASH,EAAa,EAAI,EAC1BI,SAAU,OACVC,OAAQ,OACRC,QAAS,OACTC,aAAc,MACdC,OAAQ,IACRC,gBAAiB,UACjBC,MAAO,QACPC,UAAW,sBACXC,MAAO,MACPC,UAAW,UAEbC,kBAAiB/B,EAfnB,UAkBE,qBACEgC,UAAW,YACXb,MAAO,CAAEO,gBAAiBlC,EAAOmC,SAEnC,mBAAGK,UAAW,aAAd,SAA6B3C,EAAK4C","file":"static/js/25.010a0a72.chunk.js","sourcesContent":["export const ITEM_TYPE = \"ITEM\";\n","import React, { useRef, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDrop, useDrag } from \"react-dnd\";\n// import Window from \"./Window\";\nimport { ITEM_TYPE } from \"../../../constants/itemType\";\n\nconst Item = ({ item, index, moveItem, status, id }) => {\n  const ref = useRef(null);\n\n  const [{ handlerId }, drop] = useDrop({\n    accept: ITEM_TYPE,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      };\n    },\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      const clientOffset = monitor.getClientOffset();\n\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      moveItem(dragIndex, hoverIndex);\n\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ITEM_TYPE, ...item, index, id },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  // const [show, setShow] = useState(false);\n\n  // const onOpen = () => setShow(true);\n\n  // const onClose = () => setShow(false);\n  drag(drop(ref));\n\n  return (\n    <Fragment>\n      <div\n        ref={ref}\n        style={{\n          opacity: isDragging ? 0 : 1,\n          fontSize: \"15px\",\n          margin: \"10px\",\n          padding: \"10px\",\n          borderRadius: \"5px\",\n          zIndex: \"1\",\n          backgroundColor: \"#3f51b5\",\n          color: \"white\",\n          boxShadow: \"5px 5px 8px #888888\",\n          width: \"80%\",\n          textAlign: \"center\"\n        }}\n        data-handler-id={handlerId}\n      // onClick={onOpen}\n      >\n        <div\n          className={\"color-bar\"}\n          style={{ backgroundColor: status.color }}\n        />\n        <p className={\"item-title\"}>{item.title}</p>\n      </div>\n      {/* <Window\n                item={item}\n                onClose={onClose}\n                show={show}\n            /> */}\n    </Fragment>\n  );\n};\n\nItem.propTypes = {\n  status: PropTypes.objectOf(PropTypes.string),\n  index: PropTypes.number,\n  item: PropTypes.shape({\n    title: PropTypes.string,\n    index: PropTypes.number,\n  }),\n  moveItem: PropTypes.func,\n  id: PropTypes.number,\n};\n\nexport default Item;\n"],"sourceRoot":""}