{"version":3,"sources":["api/apiSongs.js","styles/helperStyles/FlexDirection.js","styles/styleComponents/authors/StyledFormAuthors.js","components/organism/songs/FormSongs.js","hook/songs/useSongs.js"],"names":["apiURL","process","songActions","url","method","data","a","fetch","headers","body","JSON","stringify","res","json","Error","getAllSongs","removeSong","id","addSong","updateSong","getSong","queryKey","FlexDirection","css","StyledForm","styled","form","type","StyledInput","TextField","typeSong","schemaValidation","yup","shape","title","required","max","author","duration","typeError","FormSongs","defaultValue","isLoading","allAuthors","children","useForm","resolver","yupResolver","register","handleSubmit","errors","reset","onSubmit","taskSongs","useParams","queryClient","useQueryClient","mutateAsync","useMutation","onFormSubmit","invalidateQueries","newAuthor","filter","e","name","useSongs","style","position","InputLabel","htmlFor","inputRef","margin","width","ref","map","item","value","inputProps","min","step","Button","variant","color","split","slice","exampleRequired","top","message","Alert","severity"],"mappings":"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","file":"static/js/3.a2fc7f35.chunk.js","sourcesContent":["const apiURL = `${process.env.REACT_APP_API_SERVER}/${process.env.REACT_APP_GITHUB_ACOUNT}`;\n\nconst songActions = async (url, method, data) => {\n  try {\n    const res = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return method === \"DELETE\" ? true : res.json();\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n\nexport const getAllSongs = () => {\n  return songActions(`${apiURL}-songs`, \"GET\");\n};\n\nexport const removeSong = (id) => {\n  return songActions(`${apiURL}-songs/${id}`, \"DELETE\");\n};\n\nexport const addSong = (data) => {\n  return songActions(`${apiURL}-songs`, \"POST\", data);\n};\n\nexport const updateSong = ({ id, ...data }) => {\n  return songActions(`${apiURL}-songs/${id}`, \"PUT\", data);\n};\n\nexport const getSong = ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  return songActions(`${apiURL}-songs/${id}`, \"GET\");\n};\n","import { css } from \"styled-components\";\n\nexport const FlexDirection = css`\n  display: flex;\n  flex-direction: column;\n`;\n","import styled, { css } from \"styled-components\";\nimport { FlexDirection } from \"../../helperStyles/FlexDirection\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport const StyledForm = styled.form`\n  ${FlexDirection}\n  align-items: center;\n  justify-content: center;\n  height: 60vh;\n  ${({ type }) =>\n    type === \"add\" &&\n    css`\n      text-transform: uppercase;\n      color: red;\n    `}\n  @media(min-height: 900px) {\n    justify-content: flex-start;\n  }\n`;\n\nexport const StyledInput = styled(TextField)`\n  margin: 10px 0;\n  ${({ typeSong }) =>\n    typeSong === \"song\" &&\n    css`\n      width: 100%;\n    `}\n`;\n","import React, { Fragment } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport PropTypes from \"prop-types\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { addSong } from \"../../../api/apiSongs\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { updateSong } from \"../../../api/apiSongs\";\nimport {\n  StyledInput,\n  StyledForm,\n} from \"../../../styles/styleComponents/authors/StyledFormAuthors\";\nimport { useSongs } from \"../../../hook/songs/useSongs\";\n\nconst schemaValidation = yup.object().shape({\n  title: yup\n    .string()\n    .required(\"Title field is required\")\n    .max(30, \"Title field should contains max 30 characters\"),\n  author: yup.string().required(\"Author fiels is required\"),\n  duration: yup\n    .number()\n    .typeError(\"Duration field must be a number\")\n    .required(\"Duration field is required\"),\n});\n\nconst FormSongs = ({\n  defaultValue,\n  isLoading,\n  type,\n  allAuthors,\n  typeSong,\n  children,\n}) => {\n  const { register, handleSubmit, errors, reset } = useForm({\n    defaultValue,\n    resolver: yupResolver(schemaValidation),\n  });\n\n  const taskSongs = type === \"add\" ? addSong : updateSong;\n  const { onSubmit } = useSongs(taskSongs, reset, allAuthors);\n\n  return (\n    <Fragment>\n      <StyledForm\n        style={{ position: \"relative\" }}\n        type={type}\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <h1>{children}</h1>\n        <InputLabel htmlFor=\"tite\">Title of song</InputLabel>\n        <StyledInput\n          required\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          inputRef={register}\n          errors={errors.title}\n        />\n        <InputLabel style={{ margin: \"10px 0\" }} htmlFor=\"author\">\n          Author\n        </InputLabel>\n        <select\n          style={{ width: \"80%\", margin: \"0 0 20px 0\" }}\n          id=\"author\"\n          name=\"author\"\n          ref={register}\n          errors={errors.author}\n        >\n          {allAuthors &&\n            allAuthors.map((item) => (\n              <option key={item.id} value={item.name}>\n                {item.name}\n              </option>\n            ))}\n        </select>\n        <InputLabel htmlFor=\"duration\">Duration</InputLabel>\n        <StyledInput\n          required\n          typeSong={typeSong}\n          type=\"number\"\n          inputProps={{ min: \"1\", max: \"10\", step: \"1\" }}\n          id=\"duration\"\n          name=\"duration\"\n          inputRef={register}\n          errors={errors.duration}\n        />\n        <Button variant=\"outlined\" color=\"primary\" type=\"submit\">\n          {isLoading ? \"Wait...\" : children.split(\" \").slice(0, 1)}\n        </Button>\n        {errors.exampleRequired && <span>This field is required</span>}\n        <div style={{ position: \"absolute\", top: \"-30%\", width: \"100%\" }}>\n          {errors?.title?.message && (\n            <Alert severity=\"error\">\n              <p>{errors?.title?.message}</p>\n            </Alert>\n          )}\n          {errors?.author?.message && (\n            <Alert severity=\"error\">{errors?.author?.message}</Alert>\n          )}\n          {errors?.duration?.message && (\n            <Alert severity=\"error\">{errors?.duration?.message}</Alert>\n          )}\n        </div>\n      </StyledForm>\n    </Fragment>\n  );\n};\n\nFormSongs.propTypes = {\n  defaultValue: PropTypes.array,\n  onFormSubmit: PropTypes.func,\n  isLoading: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n  typeSong: PropTypes.string,\n  children: PropTypes.string.isRequired,\n  allAuthors: PropTypes.array,\n};\n\nexport default FormSongs;\n","import { useMutation, useQueryClient } from \"react-query\";\nimport { useParams } from \"react-router-dom\";\n\nexport const useSongs = (taskSongs, reset, allAuthors) => {\n  const { id } = useParams();\n\n  const queryClient = useQueryClient();\n  const { mutateAsync } = useMutation(taskSongs);\n  const onSubmit = (data) => {\n    let { author, title, duration } = data;\n    const newAuthor = allAuthors.filter((e) => e.name === author);\n    onFormSubmit({ title, author: newAuthor[0], duration });\n    reset();\n  };\n\n  const onFormSubmit = async (data) => {\n    await mutateAsync(id ? { ...data, id } : data);\n    queryClient.invalidateQueries(\"songs\");\n  };\n  return { onSubmit };\n};\n"],"sourceRoot":""}