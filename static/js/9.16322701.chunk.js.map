{"version":3,"sources":["api/apiAuthors.js","components/organism/authors/ListAuthors.js"],"names":["getAllAuthors","a","fetch","process","res","json","Error","removeAuthor","id","method","addAuthor","data","headers","body","JSON","stringify","response","da","updateAuthor","getAuthor","queryKey","Author","lazy","ListAuthors","useQuery","error","isLoading","isError","color","to","map","author","message"],"mappings":"4TAAaA,EAAa,uCAAG,4BAAAC,EAAA,+EAEPC,MAAM,GAAD,OAClBC,gCADkB,+BAFE,cAEnBC,EAFmB,yBAKlBA,EAAIC,QALc,sCAOnB,IAAIC,MAAJ,sCAPmB,yDAAH,qDAWbC,EAAY,uCAAG,WAAOC,GAAP,SAAAP,EAAA,+EAElBC,MAAM,GAAD,OACNC,gCADM,sCACwDK,GACjE,CACEC,OAAQ,WALY,iCAQjB,GARiB,sCAUlB,IAAIH,MAAJ,sCAVkB,wDAAH,sDAcZI,EAAS,uCAAG,WAAOC,GAAP,iBAAAV,EAAA,+EAEEC,MAAM,GAAD,OACvBC,gCADuB,8BAE1B,CACEM,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUJ,KATJ,cAEfK,EAFe,gBAYJA,EAASX,OAZL,cAYfY,EAZe,yBAadA,GAbc,wCAef,IAAIX,MAAJ,sCAfe,0DAAH,sDAmBTY,EAAY,uCAAG,mCAAAjB,EAAA,6DAASO,EAAT,EAASA,GAAOG,EAAhB,wCAEDT,MAAM,GAAD,OACvBC,gCADuB,sCACuCK,GACjE,CACEC,OAAQ,MACRG,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUJ,KATD,cAElBK,EAFkB,gBAYPA,EAASX,OAZF,cAYlBY,EAZkB,yBAajBA,GAbiB,wCAelB,IAAIX,MAAJ,sCAfkB,0DAAH,sDAmBZa,EAAS,uCAAG,mCAAAlB,EAAA,6DAASmB,EAAT,EAASA,SAAT,cAEAA,EAFA,QAERZ,EAFQ,KAERA,GAFQ,kBAIEN,MAAM,GAAD,OACvBC,gCADuB,sCACuCK,IAL9C,cAIfQ,EAJe,yBAOdA,EAASX,QAPK,sCASf,IAAIC,MAAJ,sCATe,yDAAH,uD,gCC/DtB,kEAKMe,EAASC,gBAAK,kBAAM,iCA2BXC,UAxBK,WAAO,IAAD,EACoBC,YAC1C,UACAxB,KAFMW,EADgB,EAChBA,KAAMc,EADU,EACVA,MAAOC,EADG,EACHA,UAAWC,EADR,EACQA,QAIhC,OACE,gCACE,cAAC,IAAD,CAAQC,MAAM,UAAd,SACE,cAAC,IAAD,CAASC,GAAG,aAAZ,0BAEDH,EACC,cAAC,IAAD,IAEA,6BACGf,EAAKmB,KAAI,SAACC,GAAD,OACR,cAACV,EAAD,CAAwBU,OAAQA,EAAQvB,GAAIuB,EAAOvB,IAAtCuB,EAAOvB,SAIzBmB,GAAW,2CAAcF,EAAMO","file":"static/js/9.16322701.chunk.js","sourcesContent":["export const getAllAuthors = async () => {\n  try {\n    const res = await fetch(\n      `${process.env.REACT_APP_API_SERVER}/justyna-olszewska-authors`\n    );\n    return res.json();\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n\nexport const removeAuthor = async (id) => {\n  try {\n    await fetch(\n      `${process.env.REACT_APP_API_SERVER}/justyna-olszewska-authors/${id}`,\n      {\n        method: \"DELETE\",\n      }\n    );\n    return true;\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n\nexport const addAuthor = async (data) => {\n  try {\n    const response = await fetch(\n      `${process.env.REACT_APP_API_SERVER}/justyna-olszewska-authors`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      }\n    );\n    const da = await response.json();\n    return da;\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n\nexport const updateAuthor = async ({ id, ...data }) => {\n  try {\n    const response = await fetch(\n      `${process.env.REACT_APP_API_SERVER}/justyna-olszewska-authors/${id}`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      }\n    );\n    const da = await response.json();\n    return da;\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n\nexport const getAuthor = async ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  try {\n    const response = await fetch(\n      `${process.env.REACT_APP_API_SERVER}/justyna-olszewska-authors/${id}`\n    );\n    return response.json();\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n","import React, { lazy } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { NavLink } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Spinner from \"../../molecules/spinner/Spinner\";\nconst Author = lazy(() => import(\"../../molecules/authors/Author\"));\nimport { getAllAuthors } from \"../../../api/apiAuthors\";\n\nconst ListAuthors = () => {\n  const { data, error, isLoading, isError } = useQuery(\n    \"authors\",\n    getAllAuthors\n  );\n  return (\n    <div>\n      <Button color=\"inherit\">\n        <NavLink to=\"/addAuthor\">Add Author</NavLink>\n      </Button>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <ul>\n          {data.map((author) => (\n            <Author key={author.id} author={author} id={author.id} />\n          ))}\n        </ul>\n      )}\n      {isError && <span>Error: {error.message}</span>}\n    </div>\n  );\n};\n\nexport default ListAuthors;\n"],"sourceRoot":""}