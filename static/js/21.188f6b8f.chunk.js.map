{"version":3,"sources":["api/apiHelper/apiHelper.js","styles/helperStyles/FlexDirection.js","api/apiSongs.js","styles/styleComponents/songs/StyledListSongs.js","components/molecules/songs/ListSongs.js"],"names":["apiURL","process","apiActions","url","method","data","a","fetch","headers","body","JSON","stringify","res","json","Error","FlexDirection","css","getAllSongs","removeSong","id","addSong","updateSong","getSong","queryKey","StyledListSongs","styled","section","StyledUl","ul","Song","lazy","ListSongs","match","useRouteMatch","useQuery","error","isLoading","isError","message","Button","variant","color","style","textDecoration","to","Spinner","map","song","massage"],"mappings":"0MAAaA,EAAM,UAAMC,gCAAN,YAA0CA,qBAEhDC,EAAU,uCAAG,WAAOC,EAAKC,EAAQC,GAApB,eAAAC,EAAA,+EAEJC,MAAMJ,EAAK,CAC3BC,OAAQA,EACRI,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAPD,cAEhBO,EAFgB,yBASJ,WAAXR,GAA6BQ,EAAIC,QATlB,sCAWhB,IAAIC,MAAJ,sCAXgB,yDAAH,2D,yFCAVC,EAAgBC,cAAH,0E,0OCAbC,EAAc,WACzB,OAAOf,YAAW,GAAD,OAAIF,IAAJ,UAAoB,QAG1BkB,EAAa,SAACC,GACzB,OAAOjB,YAAW,GAAD,OAAIF,IAAJ,kBAAoBmB,GAAM,WAGhCC,EAAU,SAACf,GACtB,OAAOH,YAAW,GAAD,OAAIF,IAAJ,UAAoB,OAAQK,IAGlCgB,EAAa,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,GAAOd,EAAW,sBAC7C,OAAOH,YAAW,GAAD,OAAIF,IAAJ,kBAAoBmB,GAAM,MAAOd,IAGvCiB,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,cAEhBA,EAFgB,GAExBJ,GAFwB,UAExBA,IACf,OAAOjB,YAAW,GAAD,OAAIF,IAAJ,kBAAoBmB,GAAM,S,0HClBhCK,EAAkBC,UAAOC,QAAV,mJACxBX,KASSY,EAAWF,UAAOG,GAAV,sFACjBb,K,eCJEc,EAAOC,gBAAK,kBAAM,kCAClBhB,EAAQgB,gBAAK,kBAAM,iCA8BVC,UA5BG,WAChB,IAAMC,EAAQC,cADQ,EAGsBC,YAAS,QAASjB,KAAtDZ,EAHc,EAGdA,KAAM8B,EAHQ,EAGRA,MAAOC,EAHC,EAGDA,UAAWC,EAHV,EAGUA,QAHV,GAIGF,GAAS,IAA1BG,eAJc,MAIJ,GAJI,EAMtB,OACE,eAACd,EAAD,WACE,+CACA,cAACe,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAjC,SACE,cAAC,IAAD,CAASC,MAAO,CAAEC,eAAgB,QAAUC,GAAE,UAAKZ,EAAM7B,IAAX,YAA9C,wBAIDiC,EACC,cAACS,EAAA,EAAD,IAEA,cAAClB,EAAD,UACGtB,EAAKyC,KAAI,SAACC,GAAD,OACR,cAAClB,EAAD,CAAoBkB,KAAMA,GAAfA,EAAK5B,SAItB,cAACL,EAAD,CAAOuB,QAASA,EAASW,QAASV","file":"static/js/21.188f6b8f.chunk.js","sourcesContent":["export const apiURL = `${process.env.REACT_APP_API_SERVER}/${process.env.REACT_APP_GITHUB_ACOUNT}`;\n\nexport const apiActions = async (url, method, data) => {\n  try {\n    const res = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return method === \"DELETE\" ? true : res.json();\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n","import { css } from \"styled-components\";\n\nexport const FlexDirection = css`\n  display: flex;\n  flex-direction: column;\n`;\n","import { apiActions, apiURL } from \"./apiHelper/apiHelper\";\n\nexport const getAllSongs = () => {\n  return apiActions(`${apiURL}-songs`, \"GET\");\n};\n\nexport const removeSong = (id) => {\n  return apiActions(`${apiURL}-songs/${id}`, \"DELETE\");\n};\n\nexport const addSong = (data) => {\n  return apiActions(`${apiURL}-songs`, \"POST\", data);\n};\n\nexport const updateSong = ({ id, ...data }) => {\n  return apiActions(`${apiURL}-songs/${id}`, \"PUT\", data);\n};\n\nexport const getSong = ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  return apiActions(`${apiURL}-songs/${id}`, \"GET\");\n};\n","import styled from \"styled-components\";\nimport { FlexDirection } from \"../../helperStyles/FlexDirection\";\n\nexport const StyledListSongs = styled.section`\n  ${FlexDirection}\n  align-items: center;\n  width: 98%;\n  min-height: 80vh;\n  @media (min-width: 768px) {\n    width: 60%;\n  }\n`;\n\nexport const StyledUl = styled.ul`\n  ${FlexDirection}\n  min-height: 100vh;\n  width: 95%;\n  padding: 0;\n`;\n","import React, { lazy } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useRouteMatch, NavLink } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport { getAllSongs } from \"../../../api/apiSongs\";\nimport {\n  StyledListSongs,\n  StyledUl,\n} from \"../../../styles/styleComponents/songs/StyledListSongs\";\nimport Spinner from \"../../molecules/spinner/Spinner\";\nconst Song = lazy(() => import(\"../songs/Song\"));\nconst Error = lazy(() => import(\"../../atom/Error\"));\n\nconst ListSongs = () => {\n  const match = useRouteMatch();\n\n  const { data, error, isLoading, isError } = useQuery(\"songs\", getAllSongs);\n  const { message = {} } = error || {};\n\n  return (\n    <StyledListSongs>\n      <h2>List of Songs</h2>\n      <Button variant=\"outlined\" color=\"inherit\">\n        <NavLink style={{ textDecoration: \"none\" }} to={`${match.url}/addSong`}>\n          Add Song\n        </NavLink>\n      </Button>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <StyledUl>\n          {data.map((song) => (\n            <Song key={song.id} song={song} />\n          ))}\n        </StyledUl>\n      )}\n      <Error isError={isError} massage={message} />\n    </StyledListSongs>\n  );\n};\n\nexport default ListSongs;\n"],"sourceRoot":""}