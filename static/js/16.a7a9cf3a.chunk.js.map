{"version":3,"sources":["api/apiAuthors.js","components/organism/songs/UpdateSong.js"],"names":["apiURL","process","authorActions","url","method","data","a","fetch","headers","body","JSON","stringify","res","json","Error","getAllAuthors","removeAuthor","id","addAuthor","updateAuthor","getAuthor","queryKey","FormSongs","lazy","UpdateSongs","useQuery","isLoading","error","isError","type","typeSong","defaultValue","allAuthors","message"],"mappings":"kUAAMA,EAAM,UAAMC,gCAAN,YAA0CA,qBAEhDC,EAAa,uCAAG,WAAOC,EAAKC,EAAQC,GAApB,eAAAC,EAAA,+EAEAC,MAAMJ,EAAK,CAC3BC,OAAQA,EACRI,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAPL,cAEZO,EAFY,yBASA,WAAXR,GAA6BQ,EAAIC,QATtB,sCAWZ,IAAIC,MAAJ,sCAXY,yDAAH,0DAeNC,EAAgB,WAC3B,OAAOb,EAAc,GAAD,OAAIF,EAAJ,YAAsB,QAG/BgB,EAAe,SAACC,GAC3B,OAAOf,EAAc,GAAD,OAAIF,EAAJ,oBAAsBiB,GAAM,WAGrCC,EAAY,SAACb,GACxB,OAAOH,EAAc,GAAD,OAAIF,EAAJ,YAAsB,OAAQK,IAGvCc,EAAe,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,GAAOZ,EAAW,sBAC/C,OAAOH,EAAc,GAAD,OAAIF,EAAJ,oBAAsBiB,GAAM,MAAOZ,IAG5Ce,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,cAElBA,EAFkB,GAE1BJ,GAF0B,UAE1BA,IACf,OAAOf,EAAc,GAAD,OAAIF,EAAJ,oBAAsBiB,GAAM,S,iCCpClD,mDAIMK,EAAYC,gBAAK,kBAAM,8DA4BdC,UA1BK,WAAO,IAAD,EACoBC,YAC1C,UACAV,KAFMV,EADgB,EAChBA,KAAMqB,EADU,EACVA,UAAWC,EADD,EACCA,MAAOC,EADR,EACQA,QAKhC,OACE,gCACGF,EACC,cAAC,IAAD,IAEA,cAACJ,EAAD,CACEO,KAAK,SACLC,SAAS,OACTC,aAAc1B,EACdqB,UAAWA,EACXM,WAAY3B,EALd,0BAUDuB,GAAW,2CAAcD,EAAMM","file":"static/js/16.a7a9cf3a.chunk.js","sourcesContent":["const apiURL = `${process.env.REACT_APP_API_SERVER}/${process.env.REACT_APP_GITHUB_ACOUNT}`;\n\nconst authorActions = async (url, method, data) => {\n  try {\n    const res = await fetch(url, {\n      method: method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return method === \"DELETE\" ? true : res.json();\n  } catch (error) {\n    throw new Error(`somthing went wrong: ${error}`);\n  }\n};\n\nexport const getAllAuthors = () => {\n  return authorActions(`${apiURL}-authors`, \"GET\");\n};\n\nexport const removeAuthor = (id) => {\n  return authorActions(`${apiURL}-authors/${id}`, \"DELETE\");\n};\n\nexport const addAuthor = (data) => {\n  return authorActions(`${apiURL}-authors`, \"POST\", data);\n};\n\nexport const updateAuthor = ({ id, ...data }) => {\n  return authorActions(`${apiURL}-authors/${id}`, \"PUT\", data);\n};\n\nexport const getAuthor = ({ queryKey }) => {\n  /*eslint-disable no-unused-vars*/\n  const [_key, { id }] = queryKey;\n  return authorActions(`${apiURL}-authors/${id}`, \"GET\");\n};\n","import React, { lazy } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getAllAuthors } from \"../../../api/apiAuthors\";\nimport Spinner from \"../../molecules/spinner/Spinner\";\nconst FormSongs = lazy(() => import(\"./FormSongs\"));\n\nconst UpdateSongs = () => {\n  const { data, isLoading, error, isError } = useQuery(\n    \"authors\",\n    getAllAuthors\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <FormSongs\n          type=\"update\"\n          typeSong=\"song\"\n          defaultValue={data}\n          isLoading={isLoading}\n          allAuthors={data}\n        >\n          Update Songs\n        </FormSongs>\n      )}\n      {isError && <span>Error: {error.message}</span>}\n    </div>\n  );\n};\n\nexport default UpdateSongs;\n"],"sourceRoot":""}