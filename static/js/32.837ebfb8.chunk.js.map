{"version":3,"sources":["components/organism/playList/Statusses.js"],"names":["Items","lazy","Item","DropWrapper","Statusses","statuses","onDrop","moveItem","items","isLoading","playList","setPlayList","changeStatusItems","match","useRouteMatch","style","display","map","element","flexDirection","margin","padding","backgroundColor","borderRadius","textAlign","fontSize","fontWeight","marginBottom","marginTop","status","toUpperCase","path","filter","item","idx","id","index"],"mappings":"uGAAA,wCAIMA,EAAQC,gBAAK,kBAAM,kCACnBC,EAAOD,gBAAK,kBAAM,yDAClBE,EAAcF,gBAAK,kBAAM,iCA8FhBG,UA5FG,SAAC,GASZ,IARLC,EAQI,EARJA,SACAC,EAOI,EAPJA,OACAC,EAMI,EANJA,SACAC,EAKI,EALJA,MACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,YACAC,EACI,EADJA,kBAEMC,EAAQC,cAEd,OACE,qBAAKC,MAAO,CAAEC,QAAS,QAAvB,SACGX,EAASY,KAAI,SAACC,GACb,OACE,sBAEEH,MAAO,CACLC,QAAS,OACTG,cAAe,SACfC,OAAQ,OACRC,QAAS,OACTC,gBAAgB,0BAChBC,aAAc,MACdC,UAAW,UATf,UAYE,oBACET,MAAO,CACLU,SAAU,OACVC,WAAY,MACZC,aAAc,OACdC,UAAW,KALf,SAQGV,EAAQW,OAAOC,gBAElB,cAAC3B,EAAD,CACEG,OAAQA,EACRuB,OAAQX,EAAQW,OAChBnB,SAAUA,EACVC,YAAaA,EACbC,kBAAmBA,EALrB,SAOGH,EACC,cAAC,IAAD,IAEA,eAAC,IAAD,WACG,IACD,cAAC,IAAD,CAAOsB,KAAM,CAAC,GAAD,OAAIlB,EAAMkB,KAAV,qBAA4BlB,EAAMkB,KAAlC,SAAb,SACE,cAAC/B,EAAD,UACGQ,EACEwB,QAAO,SAACC,GAAD,OAAUA,EAAKJ,SAAWX,EAAQW,UACzCZ,KAAI,SAACgB,EAAMC,GAAP,OACH,cAAChC,EAAD,CAEEiC,GAAIF,EAAKE,GACTF,KAAMA,EACNG,MAAOF,EACP3B,SAAUA,EACVsB,OAAQX,GALHe,EAAKE,WASX,WAhDVjB,EAAQW","file":"static/js/32.837ebfb8.chunk.js","sourcesContent":["import React, { lazy } from \"react\";\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../../molecules/spinner/Spinner\";\nconst Items = lazy(() => import(\"../../organism/playList/Items\"));\nconst Item = lazy(() => import(\"../../organism/playList/Item\"));\nconst DropWrapper = lazy(() => import(\"../../organism/playList/DropWrapper\"));\n\nconst Statusses = ({\n  statuses,\n  onDrop,\n  moveItem,\n  items,\n  isLoading,\n  playList,\n  setPlayList,\n  changeStatusItems,\n}) => {\n  const match = useRouteMatch();\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {statuses.map((element) => {\n        return (\n          <div\n            key={element.status}\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              margin: \"20px\",\n              padding: \"20px\",\n              backgroundColor: `var(--background-color)`,\n              borderRadius: \"5px\",\n              textAlign: \"center\"\n            }}\n          >\n            <h2\n              style={{\n                fontSize: \"20px\",\n                fontWeight: \"600\",\n                marginBottom: \"20px\",\n                marginTop: \"0\",\n              }}\n            >\n              {element.status.toUpperCase()}\n            </h2>\n            <DropWrapper\n              onDrop={onDrop}\n              status={element.status}\n              playList={playList}\n              setPlayList={setPlayList}\n              changeStatusItems={changeStatusItems}\n            >\n              {isLoading ? (\n                <Spinner />\n              ) : (\n                <Switch>\n                  {\" \"}\n                  <Route path={[`${match.path}/update`, `${match.path}/add`]}>\n                    <Items >\n                      {items\n                        .filter((item) => item.status === element.status)\n                        .map((item, idx) => (\n                          <Item\n                            key={item.id}\n                            id={item.id}\n                            item={item}\n                            index={idx}\n                            moveItem={moveItem}\n                            status={element}\n                          />\n                        ))}\n                    </Items>\n                  </Route>{\" \"}\n                </Switch>\n              )}\n            </DropWrapper>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nStatusses.propTypes = {\n  isLoading: PropTypes.bool,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    })\n  ),\n  moveItem: PropTypes.func,\n  onDrop: PropTypes.func,\n  statuses: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n  playList: PropTypes.array,\n  setPlayList: PropTypes.func,\n  changeStatusItems: PropTypes.func,\n  isOver: PropTypes.bool,\n};\n\nexport default Statusses;\n"],"sourceRoot":""}